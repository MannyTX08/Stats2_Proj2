# Create DF of independent/dependent variables
nonvars = c("PassengerId","Name","Ticket","Cabin")
full2 = full[,!(names(full) %in% nonvars)]
str(full2)
convert.vars <- c('Pclass','Sex','Embarked','Title')
full2[convert.vars] <- lapply(full2[convert.vars], function(x) as.numeric(x))
# Get back to train data set
train2 <- full2[!is.na(full2$Survived),]
test2 <- full2[is.na(full2$Survived),]
# Correlation matrix
cor(train2)
# now selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n=nrow(train2), size=floor(.75*nrow(train2)), replace=FALSE)
# subset the data using the sample integer vector created above
train3 <- train2[sample, ]
test3  <- train2[-sample, ]
# Logistic regression model
TitanicLog1 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog1)
View(train2)
train <- read.csv('~/Stats2_Proj2/Data/train.csv')
pwd
getwd()
train <- read.csv('Data/train.csv')
test <- read.csv('Data/test.csv')
Amelia::missmap(train, main="Missing Values in Raw Data", col = c("black","light blue"))
Amelia::missmap(test, main="Missing Values in Raw Data", col = c("black","light blue"))
# Append test to train for data review and cleaning (result column only valid in train)
full <- bind_rows(train, test)
# Review if components of name, specifically title add to prediction
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Currently 18 levels for Factor title
table(full$Sex, full$Title)
uncommon <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
full$Title[full$Title == 'Mlle']  <- 'Miss'
full$Title[full$Title == 'Ms']  <- 'Miss'
full$Title[full$Title == 'Mme']  <- 'Mrs'
full$Title[full$Title %in% uncommon]  <- 'uncommon'
# Reduced to 5 levels for Factor Title
table(full$Sex, full$Title)
sum(is.na(train$Age)) # 177 missing values
sum(is.na(full$Age))  # 263 missing values in both train and test
# Create Age as a categorical variable
# Create Age as a categorical variable
#   Be sure to run this BEFORE imputing with mice and rf
full$AgeBin<-addNA(cut(full$Age, seq(0, 90, by=10)))
#full$AgeBin[10:35]
l<-levels(full$AgeBin)[-(length(levels(full$AgeBin)))]
#l
#    replace <NA> with 'unknown'
levels(full$AgeBin)<-c(l, 'unknown')
full$AgeBin[10:35]
# Create a family = siblings + parents/children
# -Possibly for dimension reducing
full$Family = full$Parch + full$SibSp
# Make variables factors into factors
factor_vars <- c('PassengerId','Pclass','Sex','Embarked','Title', 'AgeBin')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf')
# Save the complete output
mice_output <- complete(mice_mod)
# Plot age distributions of raw data against imputed from mice package
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data', col='lightblue', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Imputation Output', col='lightblue', ylim=c(0,0.04))
# Replace Age variable from the mice model
full$Age <- mice_output$Age
# Show new number of missing Age values is now 0
sum(is.na(full$Age))
# Create DF of independent/dependent variables
nonvars = c("PassengerId","Name","Ticket","Cabin")
full2 = full[,!(names(full) %in% nonvars)]
str(full2)
convert.vars <- c('Pclass','Sex','Embarked','Title', 'AgeBin')
full2[convert.vars] <- lapply(full2[convert.vars], function(x) as.numeric(x))
# Get back to train data set
train1 <- full[!is.na(full$Survived),!(names(full) %in% nonvars)]
test1 <- full[is.na(full$Survived),!(names(full) %in% nonvars)]
train2 <- full2[!is.na(full2$Survived),]
test2 <- full2[is.na(full2$Survived),]
# Structure & Correlation matrix
str(train2)
cor(train2)
# Load train and test csv files from working directory
# Using Amelia package visualize where we need imputation
par(mfrow=c(1,2))
train <- read.csv('Data/train.csv') # Reading from location after clone
Amelia::missmap(train, main="Missing Values in Train Data", col = c("black","light blue"))
test <- read.csv('Data/test.csv') # Reading from location after clone
Amelia::missmap(test, main="Missing Values in Test Data", col = c("black","light blue"))
par(mfrow=c(1,1))
# Append test to train for data review and cleaning (result column only valid in train)
full <- bind_rows(train, test)
# Review if components of name, specifically title add to prediction
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Currently 18 levels for Factor title
table(full$Sex, full$Title)
uncommon <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Combine different titles into similar category
# Mlle is french for 'Mademoiselle'
# Mme is French for 'Madame'
# https://en.wikipedia.org/wiki/Mademoiselle_(title)
# https://en.wikipedia.org/wiki/French_honorifics
full$Title[full$Title == 'Mlle']  <- 'Miss'
full$Title[full$Title == 'Ms']  <- 'Miss'
full$Title[full$Title == 'Mme']  <- 'Mrs'
full$Title[full$Title %in% uncommon]  <- 'uncommon'
# Reduced to 5 levels for Factor Title
table(full$Sex, full$Title)
# Using mice package impute values for Age that are missing
sum(is.na(train$Age)) # 177 missing values
sum(is.na(full$Age))  # 263 missing values in both train and test
# Create Age as a categorical variable
#   Be sure to run this BEFORE imputing with mice and rf
full$AgeBin<-addNA(cut(full$Age, seq(0, 90, by=10)))
#full$AgeBin[10:35]
l<-levels(full$AgeBin)[-(length(levels(full$AgeBin)))]
#l
#    replace <NA> with 'unknown'
levels(full$AgeBin)<-c(l, 'unknown')
full$AgeBin[10:35]
# Create a family = siblings + parents/children
# -Possibly for dimension reducing
full$Family = full$Parch + full$SibSp
# Make variables factors into factors
factor_vars <- c('PassengerId','Pclass','Sex','Embarked','Title', 'AgeBin')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf')
# Save the complete output
mice_output <- complete(mice_mod)
# Plot age distributions of raw data against imputed from mice package
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data', col='lightblue', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Imputation Output', col='lightblue', ylim=c(0,0.04))
# Replace Age variable from the mice model
full$Age <- mice_output$Age
# Show new number of missing Age values is now 0
sum(is.na(full$Age))
# Create DF of independent/dependent variables
nonvars = c("PassengerId","Name","Ticket","Cabin")
full2 = full[,!(names(full) %in% nonvars)]
str(full2)
convert.vars <- c('Pclass','Sex','Embarked','Title', 'AgeBin')
full2[convert.vars] <- lapply(full2[convert.vars], function(x) as.numeric(x))
# Get back to train data set
train1 <- full[!is.na(full$Survived),!(names(full) %in% nonvars)]
test1 <- full[is.na(full$Survived),!(names(full) %in% nonvars)]
train2 <- full2[!is.na(full2$Survived),]
test2 <- full2[is.na(full2$Survived),]
# Structure & Correlation matrix
str(train2)
cor(train2)
ls()
rm(list = ls())
train <- read.csv('Data/train.csv') # Reading from location after clone
Amelia::missmap(train, main="Missing Values in Train Data", col = c("black","light blue"))
test <- read.csv('Data/test.csv') # Reading from location after clone
Amelia::missmap(test, main="Missing Values in Test Data", col = c("black","light blue"))
par(mfrow=c(1,1))
# Append test to train for data review and cleaning (result column only valid in train)
full <- bind_rows(train, test)
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressWarnings(sapply(load.lib,require,character=TRUE))
suppressMessages(sapply(load.lib,require,character=TRUE))
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
View(test2)
TitanicLog1 = glm(Survived ~ ., data = train2, family = binomial(link='logit'))
summary(TitanicLog1)
fittedresults <- predict(TitanicLog1, newdata=test2, type='response')
sum(is.na(fittedresults))
fittedresults <- ifelse(fittedresults > 0.5, 1, 0)
misClasificError <- mean(fittedresults != test3$Survived, na.rm=TRUE) # this adds up all the instances of misclassification then divides by total (via mean)
fittedresults <- predict(TitanicLog1, newdata=test2, type='response')
test2$Survived = fittedresults
View(test2)
TitanicLogKaggel = glm(Survived ~ ., data = train2, family = binomial(link='logit'))
summary(TitanicLog1)
fittedresults <- predict(TitanicLogKaggel, newdata=test2, type='response')
Kaggel = data.frame(PassengerID = rownames(train2), Survived = fittedresults)
Kaggel = data.frame(PassengerID = rownames(test2), Survived = fittedresults)
View(Kaggel)
# count any NAs in the fittedresults
sum(is.na(Kaggel$Survived))
# if P(y=1|X) > 0.5 then y = 1 otherwise y=0
Kaggel$Survived <- ifelse(fittedresults > 0.5, 1, 0)
write.csv(Kaggel, file = 'titanic_output.csv', row.names = F)
Kaggel$Survived <- ifelse(is.na(fittedresults), 1, 0)
# count any NAs in the fittedresults
sum(is.na(Kaggel$Survived))
write.csv(Kaggel, file = 'titanic_output.csv', row.names = F)
rm(list=ls())
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
#INPUT: train2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#INPUT: test2       CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
source('KaggleSubmission.R', echo=TRUE)
#INPUT: train2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#INPUT: test2       CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
source('KaggleSubmission.R', echo=TRUE)
#INPUT:  train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#INPUT:  test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
source('KaggelSubmission.R', echo=TRUE)
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
test2[is.na(test2$Far),e]
test2[is.na(test2$Fare),]
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
View(full)
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
theme_few()
seq(0,80,10)
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(limits = seq(0,80,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
theme_few()
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(limits = c(0,80), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = 5, labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,90,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,5), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3") +
ggtitle(subtitle = median(Fare, na.rm=T)) +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",subtitle = median(Fare, na.rm=T)) +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",subtitle = paste("Median Fare",median(Fare, na.rm=T))) +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",subtitle = paste("Median Fare",median(Full$Fare, na.rm=T))) +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",subtitle = paste("Median Fare",median(full$Fare, na.rm=T))) +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",
subtitle = paste("Median Fare",median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm=T))) +
theme_few()
median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",
subtitle = paste0("Median Fare: $",median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm=T))) +
theme_few()
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",
subtitle = paste0("Median Fare: $",
median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm=T))) +
theme_few()
# Replace missing fare value with median fare for class/embarkment
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),]
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),rownames]
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),rownames()]
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),rownames(full)]
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),rownames(full$PassengerId)]
rml(list=ls())
rm(list=ls())
par(mfrow=c(1,2))
train <- read.csv('Data/train.csv') # Reading from location after clone
Amelia::missmap(train, main="Missing Values in Train Data", col = c("black","light blue"))
test <- read.csv('Data/test.csv') # Reading from location after clone
Amelia::missmap(test, main="Missing Values in Test Data", col = c("black","light blue"))
par(mfrow=c(1,1))
# Append test to train for data review and cleaning (result column only valid in train)
full <- bind_rows(train, test)
# Review if components of name, specifically title add to prediction
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Currently 18 levels for Factor title
table(full$Sex, full$Title)
uncommon <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Combine different titles into similar category
# Mlle is french for 'Mademoiselle'
# Mme is French for 'Madame'
# https://en.wikipedia.org/wiki/Mademoiselle_(title)
# https://en.wikipedia.org/wiki/French_honorifics
full$Title[full$Title == 'Mlle']  <- 'Miss'
full$Title[full$Title == 'Ms']  <- 'Miss'
full$Title[full$Title == 'Mme']  <- 'Mrs'
full$Title[full$Title %in% uncommon]  <- 'uncommon'
# Reduced to 5 levels for Factor Title
table(full$Sex, full$Title)
# Handle the null Fare in Test
# The passenger departed from S and had Pclass = 3, lets find an appropriate value
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",
subtitle = paste0("Median Fare: $",
median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm=T))) +
theme_few()
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),rownames(full$PassengerId)]
nullFare
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),]
nullFare
View(nullFare)
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
# Using mice package impute values for Age that are missing
sum(is.na(train$Age)) # 177 missing values
# Load train and test csv files from working directory
# Using Amelia package visualize where we need imputation
#setwd("~/Stats2_Proj2/")
par(mfrow=c(1,2))
train <- read.csv('Data/train.csv') # Reading from location after clone
Amelia::missmap(train, main="Missing Values in Train Data", col = c("black","light blue"))
test <- read.csv('Data/test.csv') # Reading from location after clone
Amelia::missmap(test, main="Missing Values in Test Data", col = c("black","light blue"))
par(mfrow=c(1,1))
# Append test to train for data review and cleaning (result column only valid in train)
full <- bind_rows(train, test)
# Review if components of name, specifically title add to prediction
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Currently 18 levels for Factor title
table(full$Sex, full$Title)
uncommon <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Combine different titles into similar category
# Mlle is french for 'Mademoiselle'
# Mme is French for 'Madame'
# https://en.wikipedia.org/wiki/Mademoiselle_(title)
# https://en.wikipedia.org/wiki/French_honorifics
full$Title[full$Title == 'Mlle']  <- 'Miss'
full$Title[full$Title == 'Ms']  <- 'Miss'
full$Title[full$Title == 'Mme']  <- 'Mrs'
full$Title[full$Title %in% uncommon]  <- 'uncommon'
# Reduced to 5 levels for Factor Title
table(full$Sex, full$Title)
# Handle the null Fare in Test
# The passenger departed from S and had Pclass = 3, lets find an appropriate value
# Replace missing fare value with median fare for class/embarkment
nullFare = full[is.na(full$Fare),] #1044
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(breaks = seq(0,70,10), labels=dollar_format()) +
ggtitle("Density of Ticket Fare for Embarked = S and Pclass = 3",
subtitle = paste0("Median Fare: $",
median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm=T))) +
theme_few()
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE) # $8.05
# Using mice package impute values for Age that are missing
sum(is.na(train$Age)) # 177 missing values
sum(is.na(full$Age))  # 263 missing values in both train and test
# Create Age as a categorical variable
#   Be sure to run this BEFORE imputing with mice and rf
full$AgeBin<-addNA(cut(full$Age, seq(0, 90, by=10)))
#full$AgeBin[10:35]
l<-levels(full$AgeBin)[-(length(levels(full$AgeBin)))]
#l
#    replace <NA> with 'unknown'
levels(full$AgeBin)<-c(l, 'unknown')
full$AgeBin[10:35]
# Create a family = siblings + parents/children
# -Possibly for dimension reducing
full$Family = full$Parch + full$SibSp
# Make variables factors into factors
factor_vars <- c('PassengerId','Pclass','Sex','Embarked','Title', 'AgeBin')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf')
# Save the complete output
mice_output <- complete(mice_mod)
# Plot age distributions of raw data against imputed from mice package
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data', col='lightblue', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Imputation Output', col='lightblue', ylim=c(0,0.04))
# Replace Age variable from the mice model
full$Age <- mice_output$Age
# Show new number of missing Age values is now 0
sum(is.na(full$Age))
# Create DF of independent/dependent variables
nonvars = c("PassengerId","Name","Ticket","Cabin")
full2 = full[,!(names(full) %in% nonvars)]
str(full2)
convert.vars <- c('Pclass','Sex','Embarked','Title', 'AgeBin')
full2[convert.vars] <- lapply(full2[convert.vars], function(x) as.numeric(x))
# Get back to train data set
train1 <- full[!is.na(full$Survived),!(names(full) %in% nonvars)]
test1 <- full[is.na(full$Survived),!(names(full) %in% nonvars)]
train2 <- full2[!is.na(full2$Survived),]
test2 <- full2[is.na(full2$Survived),]
# Structure & Correlation matrix
str(train2)
cor(train2)
#INPUT:  train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#INPUT:  test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
source('KaggelSubmission.R', echo=TRUE)
rm(list=ls())
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
# Load necessary packages and ensure they are active
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
###### IMPORT DATA / CLEAN DATA / IMPUTE VARIABLES / CREATE NEW VARIABLES
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
#OUTPUT: train      RAW DATA LOADED IN WORKSPACE
#OUTPUT: test       RAW DATA LOADED IN WORKSPACE
#OUTPUT: train1     CLEAN DATA STORED IN WORKSPACE
#OUTPUT: test1      CLEAN DATA STORED IN WORKSPACE
#OUTPUT: train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#OUTPUT: test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#INPUT:  train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#INPUT:  test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
source('KaggelSubmission.R', echo=TRUE)
#OUTPUT: TitanicLogKaggel     CLEAN DATA STORED IN WORKSPACE, KAGGEL SUBMISSION
#OUTPUT: titanic_output.csv   OUTPUT FILE FOR KAGGEL SUBMISSION
