#OUTPUT: train1     CLEAN DATA STORED IN WORKSPACE
#OUTPUT: test1      CLEAN DATA STORED IN WORKSPACE
#OUTPUT: train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#OUTPUT: test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
install.packages("glmnet")
# Load necessary packages and ensure they are active
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm", "glmnet")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
# Load necessary packages and ensure they are active
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm", "glmnet")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
setwd("~/Stats@_Proj2/")
getwd()
setwd("~/Stats2_Proj2/")
# Load necessary packages and ensure they are active
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
install.packages("bestglm")
# Load necessary packages and ensure they are active
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
X<-train1[, !(names(train1) %in% c("Pclass", "Sex", "Embarked", "Title", "AgeBin", "Survived"))]
y<-train1[, "Survived"]
testglm2<-glmnet(x=X, y=Y, family="binomial")
library(glmnet)
testglm2<-glmnet(x=X, y=Y, family="binomial")
testglm2<-glmnet(x=X, y=y, family="binomial")
testglm2<-glmnet(x=X, y=as.factor(y), family="binomial")
testglm2<-glmnet(x=as.matrix(X), y=as.factor(y), family="binomial")
ls(testglm2)
summary(testglm2)
testglm2$beta
str(train1)
train1$Male = (train1$Sex == "male")*1
train1$Female = (train1$Sex == "female") * 1
train1$Class1 = (train1$Pclass == "1")*1
train1$Class2 = (train1$Pclass == "2")*1
train1$Class3 = (train1$Pclass == "3")*1
train1$PortC = (train1$Embarked == "C")*1
train1$PortQ = (train1$Embarked == "Q")*1
train1$PortS = (train1$Embarked == "S")*1
train1$Child = (train1$AgeBin == "6 or less")*1
train1$Adult= (train1$AgeBin == "(7 - 63]")*1
train1$Senior = (train1$AgeBin == "Over 63")*1
#lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
train$Master = (train1$Title == "Master")*1
train1$Miss  = (train1$Title == "Miss")*1
train1$Mr    = (train1$Title == "Mr")*1
train1$Mrs   = (train1$Title == "Mrs")*1
train1$uncommon= (train1$Title == "uncommon")*1
table(	train1$Male, train1$Sex )
table(	train1$Female, train1$Sex )
table(	train1$Class1, train1$Pclass)
table(	train1$Class2, train1$Pclass )
table(	train1$Class3, train1$Pclass 	)
table(	train1$PortC, train1$Embarked 	)
table(	train1$PortQ, train1$Embarked 	)
table(	train1$PortS, train1$Embarked 	)
table(	train1$Child, train1$AgeBin	)
table(	train1$Senior, train1$AgeBin 	)
table(	train1$Adult, train1$AgeBin 	)
table(	train$Master, train1$Title )
table(	train1$Miss, train1$Title 	)
table(	train1$Mr, train1$Title )
table(	train1$Mrs, train1$Title )
table(	train1$uncommon, train1$Title	)
test1$Male = (test1$Sex == "male")*1
test1$Female = (test1$Sex == "female") * 1
test1$Class1 = (test1$Pclass == "1")*1
test1$Class2 = (test1$Pclass == "2")*1
test1$Class3 = (test1$Pclass == "3")*1
test1$PortC = (test1$Embarked == "C")*1
test1$PortQ = (test1$Embarked == "Q")*1
test1$PortS = (test1$Embarked == "S")*1
test1$Child = (test1$AgeBin == "6 or less")*1
test1$Adult= (test1$AgeBin == "(7 - 63]")*1
test1$Senior = (test1$AgeBin == "Over 63")*1
#lapply(levels(test1$Title), function(x) paste("test1", x, sep="$"))
train$Master = (test1$Title == "Master")*1
test1$Miss  = (test1$Title == "Miss")*1
test1$Mr    = (test1$Title == "Mr")*1
test1$Mrs   = (test1$Title == "Mrs")*1
test1$uncommon= (test1$Title == "uncommon")*1
str(train1)
train1$Male = (train1$Sex == "male")*1
train1$Female = (train1$Sex == "female") * 1
train1$Class1 = (train1$Pclass == "1")*1
train1$Class2 = (train1$Pclass == "2")*1
train1$Class3 = (train1$Pclass == "3")*1
train1$PortC = (train1$Embarked == "C")*1
train1$PortQ = (train1$Embarked == "Q")*1
train1$PortS = (train1$Embarked == "S")*1
train1$Child = (train1$AgeBin == "6 or less")*1
train1$Adult= (train1$AgeBin == "(7 - 63]")*1
train1$Senior = (train1$AgeBin == "Over 63")*1
#lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
train1$Master = (train1$Title == "Master")*1
train1$Miss  = (train1$Title == "Miss")*1
train1$Mr    = (train1$Title == "Mr")*1
train1$Mrs   = (train1$Title == "Mrs")*1
train1$uncommon= (train1$Title == "uncommon")*1
table(	train1$Male, train1$Sex )
table(	train1$Female, train1$Sex )
table(	train1$Class1, train1$Pclass)
table(	train1$Class2, train1$Pclass )
table(	train1$Class3, train1$Pclass 	)
table(	train1$PortC, train1$Embarked 	)
table(	train1$PortQ, train1$Embarked 	)
table(	train1$PortS, train1$Embarked 	)
table(	train1$Child, train1$AgeBin	)
table(	train1$Senior, train1$AgeBin 	)
table(	train1$Adult, train1$AgeBin 	)
table(	train1$Master, train1$Title )
table(	train1$Miss, train1$Title 	)
table(	train1$Mr, train1$Title )
table(	train1$Mrs, train1$Title )
table(	train1$uncommon, train1$Title	)
test1$Male = (test1$Sex == "male")*1
test1$Female = (test1$Sex == "female") * 1
test1$Class1 = (test1$Pclass == "1")*1
test1$Class2 = (test1$Pclass == "2")*1
test1$Class3 = (test1$Pclass == "3")*1
test1$PortC = (test1$Embarked == "C")*1
test1$PortQ = (test1$Embarked == "Q")*1
test1$PortS = (test1$Embarked == "S")*1
test1$Child = (test1$AgeBin == "6 or less")*1
test1$Adult= (test1$AgeBin == "(7 - 63]")*1
test1$Senior = (test1$AgeBin == "Over 63")*1
#lapply(levels(test1$Title), function(x) paste("test1", x, sep="$"))
train$Master = (test1$Title == "Master")*1
test1$Miss  = (test1$Title == "Miss")*1
test1$Mr    = (test1$Title == "Mr")*1
test1$Mrs   = (test1$Title == "Mrs")*1
test1$uncommon= (test1$Title == "uncommon")*1
str(train1)
train1$Male = (train1$Sex == "male")*1
train1$Female = (train1$Sex == "female") * 1
train1$Class1 = (train1$Pclass == "1")*1
train1$Class2 = (train1$Pclass == "2")*1
train1$Class3 = (train1$Pclass == "3")*1
train1$PortC = (train1$Embarked == "C")*1
train1$PortQ = (train1$Embarked == "Q")*1
train1$PortS = (train1$Embarked == "S")*1
train1$Child = (train1$AgeBin == "6 or less")*1
train1$Adult= (train1$AgeBin == "(7 - 63]")*1
train1$Senior = (train1$AgeBin == "Over 63")*1
#lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
train1$Master = (train1$Title == "Master")*1
train1$Miss  = (train1$Title == "Miss")*1
train1$Mr    = (train1$Title == "Mr")*1
train1$Mrs   = (train1$Title == "Mrs")*1
train1$uncommon= (train1$Title == "uncommon")*1
table(	train1$Male, train1$Sex )
table(	train1$Female, train1$Sex )
table(	train1$Class1, train1$Pclass)
table(	train1$Class2, train1$Pclass )
table(	train1$Class3, train1$Pclass 	)
table(	train1$PortC, train1$Embarked 	)
table(	train1$PortQ, train1$Embarked 	)
table(	train1$PortS, train1$Embarked 	)
table(	train1$Child, train1$AgeBin	)
table(	train1$Senior, train1$AgeBin 	)
table(	train1$Adult, train1$AgeBin 	)
table(	train1$Master, train1$Title )
table(	train1$Miss, train1$Title 	)
table(	train1$Mr, train1$Title )
table(	train1$Mrs, train1$Title )
table(	train1$uncommon, train1$Title	)
test1$Male = (test1$Sex == "male")*1
test1$Female = (test1$Sex == "female") * 1
test1$Class1 = (test1$Pclass == "1")*1
test1$Class2 = (test1$Pclass == "2")*1
test1$Class3 = (test1$Pclass == "3")*1
test1$PortC = (test1$Embarked == "C")*1
test1$PortQ = (test1$Embarked == "Q")*1
test1$PortS = (test1$Embarked == "S")*1
test1$Child = (test1$AgeBin == "6 or less")*1
test1$Adult= (test1$AgeBin == "(7 - 63]")*1
test1$Senior = (test1$AgeBin == "Over 63")*1
#lapply(levels(test1$Title), function(x) paste("test1", x, sep="$"))
test1$Master = (test1$Title == "Master")*1
test1$Miss  = (test1$Title == "Miss")*1
test1$Mr    = (test1$Title == "Mr")*1
test1$Mrs   = (test1$Title == "Mrs")*1
test1$uncommon= (test1$Title == "uncommon")*1
Xy<-cbind.data.frame( train1[, !(names(train1) %in% c("Pclass", "Sex", "Embarked", "Title", "AgeBin", "Survived"))],
"Survived"=train1[, "Survived"]  )
#  testglm<-bestglm(Xy, family = binomial(link='logit'), IC="CV")
X<-train1[, !(names(train1) %in% c("Pclass", "Sex", "Embarked", "Title", "AgeBin", "Survived"))]
y<-train1[, "Survived"]
testglm2<-glmnet(x=as.matrix(X), y=as.factor(y), family="binomial")
ls(testglm2)
summary(testglm2)
testglm2$beta
# split the training data into a secondary test (not Kaggle)
set.seed(100) # set seed so that same sample can be reproduced in future
testglm2<-glmnet(x=as.matrix(X), y=as.factor(y), family="binomial")
ls(testglm2)
summary(testglm2)
testglm2$beta
testglm3<-cv.glmnet(x=as.matrix(X), y=as.factor(y), type.measure = "mse")
testglm3<-cv.glmnet(x=as.matrix(X), y, type.measure = "mse")
testglm4<-glmnet(x=as.matrix(X), y=as.factor(y), family="binomial")
ls(testglm4)
summary(testglm4)
testglm4<-glmnet(x=as.matrix(X), y=as.factor(y), family="binomial", lambda=testglm3$lambda)
ls(testglm4)
summary(testglm4)
testglm4$df
coef(testglm4)
coef(testglm4, 20)
coef(testglm4, 50)
# split the training data into a secondary test (not Kaggle)
set.seed(200) # set seed so that same sample can be reproduced in future
coef(testglm3, 50)
testglm3<-cv.glmnet(x=as.matrix(X), y, type.measure = "mse")
testglm4<-glmnet(x=as.matrix(X), y=as.factor(y), family="binomial", lambda=testglm3$lambda)
ls(testglm4)
summary(testglm4)
testglm4$df
coef(testglm4, 50)
coef(testglm4, 15)
coef(testglm4, s=0.1)
coef(testglm4, s=0.05)
coef(testglm4, s="lambda.min")
coef(testglm4, s = "lambda.min")
testglm4$lambda
plot(testglm4)
plot(testglm3)
coef(testglm3, s="lambda.min")
T1<-test1[, !(names(test1) %in% c("Pclass", "Sex", "Embarked", "Title", "AgeBin", "Survived"))]
p3<-predict(testglm3, T1, s="lambda.min")
p3<-predict(testglm3, as.matrix(T1), s="lambda.min")
str(X)
str(T1)
str(p3)
dim(p3)
class(testglm3)
class(testglm4)
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
######################
# Using glmnet and LASSO
# Isolate the binary response "Survived" from the training data
GLMTrain.y <- train1$Survived
GLMTrain.y <- as.factor(as.character(GLMTrain.y))
# create train data set while removing "Survived" from the training data
GLMTrain.x <- train1[,!(colnames(train1) == "Survived")]
# isolate categorical/factors from the continuous features, create dummy variable matrix for all factors
GLMTrain.xfactors <- model.matrix(GLMTrain.y ~ GLMTrain.x$Pclass + GLMTrain.x$Sex + GLMTrain.x$SibSp + GLMTrain.x$Parch + GLMTrain.x$Embarked + GLMTrain.x$Title + GLMTrain.x$AgeBin)[, -1]
str(GLMTrain.xfactors)
dim(GLMTrain.xfactors)
GLMTrain.xfactors[1:25,]
ACkaggle<-cbind.data.frame("PassengerID"=test1$PassengerId, "Survived"=round(p3))
write.csv(ACkaggle, file="~/ACKaggle2.csv", row.names = FALSE)
str(p3)
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p3))
write.csv(ACkaggle, file="~/ACKaggle2.csv", row.names = FALSE)
length(p3)
length(test$PassengerId)
str(ACkaggle)
dim(p3)
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p3))
names(ACkaggle)<-c("PassengerID", "Survived")
write.csv(ACkaggle, file="~/ACKaggle2.csv", row.names = FALSE)
str(ACkaggle)
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p3))
names(ACkaggle)<-c("PassengerID", "Survived")
write.csv(ACkaggle, file="~/ACKaggle2.csv", row.names = FALSE)
coef(testglm3, s="lambda.min")
# Load necessary packages and ensure they are active
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
###### IMPORT DATA / CLEAN DATA / IMPUTE VARIABLES / CREATE NEW VARIABLES
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
#OUTPUT: train      RAW DATA LOADED IN WORKSPACE
#OUTPUT: test       RAW DATA LOADED IN WORKSPACE
#OUTPUT: train1     CLEAN DATA STORED IN WORKSPACE
#OUTPUT: test1      CLEAN DATA STORED IN WORKSPACE
#OUTPUT: train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#OUTPUT: test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
par(mfrow=c(1,1))
par(xpd=NA)
#par(oma=c(3.7,0,0,0))
#par(mar=c(5, 4, 4, 2) + 0.1)
############################
## FUNCTIONS
############################
# Barplot Percentages
summ.percent.by<-function(vec1, vec2, main="Percents", xname='vec1', yname='vec2'){
par(xpd=NA)
par(mar=c(4.5, 4, 4, 2))
#par(oma=c(4.6, 0, 0, 0))
# vec1=train$Pclass
# vec2=train$Survived
# main="Percents"
t<-table(vec1, vec2, dnn=c(xname, yname))
print(t)
t2<-t/apply(t, 1, sum)
barplot(t(t2), col=c('grey', 'lightblue'), legend.text=c('0=Did not Survive','1=Survived'),
main=main, args.legend = list(x="bottom", horiz=TRUE, inset=c(0, -0.3)))
print(t2)
par(mar=c(5, 4, 4, 2) + 0.1)
#par(mar=c(1, 3, 3, 2) + 0.1)
}
summ.percent.by(train$Pclass, train$Survived, main="Percent Survived by Class",
xname='Passenger Class', yname="Survived")
# Dual Histograms
hist.by<-function(vec1, vec2, main="Percents", ymax=25, breaks=breaks, xname='vec1', yname='vec2'){
par(mfrow=c(2,1))
# vec1=train$Fare
# vec2=train$Survived
# main="Percents"
# xname='vec1'
# yname='vec2'
# ymax=25
vec1_1=vec1[vec2==1]
vec1_2=vec1[vec2==0]
t<-table(vec1, vec2, dnn=c(xname, yname))
xmin=min(vec1)
xmax=max(vec1)
ymax=ymax
breaks2=seq(xmin, xmax, length.out = breaks)
par(mar=c(0.2,5,3,3))
hist(vec1_1 , main=main , xlim=c(xmin,xmax), ylab="Freq. Survived", xlab="", ylim=c(0,ymax) , xaxt="n",
las=1 , col="lightblue", breaks=breaks2)
legend("topright", c('Survived', 'Did Not Survive'), col=c('lightblue','tomato3') , pch = 15)
par(mar=c(5,5,0.2,3))
hist(vec1_2 , main= '', xlim=c(xmin,xmax), ylab="Freq. not Survived", xlab=xname, ylim=c(ymax,0) ,
las=1 , col="tomato3"  , breaks=breaks2)
par(mfrow=c(1,1))
par(mar=c(5, 4, 4, 2) + 0.1)
}
# test
hist.by(train$Fare[train$Fare < 150], train$Survived[train$Fare < 150],
main="Histograms of Fare by Survival", ymax=300, breaks=20,
xname='Fare', yname="Survived")
summary(train1[,"Title"])
summary(test1[,"Title"])
summ.percent.by(train1$Title, train1$Survived, main="Proportion Survived by Title",
xname='Passenger Title', yname="Survived")
AgeBin3<-cut(train1$Age, seq(0, 80, by=10))
#levels(AgeBin3)<-c(rep("6 or less", 2), rep("(7 - 63]", 19), rep("Over 63", 9))
summ.percent.by(AgeBin3,
train1$Survived,
main="Proportion Survived by AgeBin",
xname='Age of Passenger (after imputation)', yname="Survived")
AgeBin3<-cut(train1$Age, seq(0, 80, by=10))
#levels(AgeBin3)<-c(rep("6 or less", 2), rep("(7 - 63]", 19), rep("Over 63", 9))
summ.percent.by(AgeBin3,
train1$Survived,
main="Proportion Survived by Age (10 Year Increments)",
xname='Age of Passenger (after imputation)', yname="Survived")
summary(train1[,"AgeBin"])
summary(test1[,"AgeBin"])
# FareBin<-cut(train$Fare, seq(0, 60, by=2))
# l<-levels(FareBin)[-(length(levels(FareBin)))]
# levels(FareBin)<-c(l, '> $58')
summ.percent.by(train1$AgeBin, train1$Survived, main="Proportion Survived by AgeBin",
xname='Age of Passenger', yname="Survived")
AgeBin3<-cut(train1$Age, seq(0, 90, by=3))
levels(AgeBin3)<-c(rep("6 or less", 2), rep("(7 - 60]", 18), rep("Over 60", 10))
summ.percent.by(AgeBin3,
train1$Survived,
main="Proportion Survived by AgeBin",
xname='Age of Passenger (after imputation)', yname="Survived")
# After imputation
AgeBin3<-cut(train1$Age, seq(0, 90, by=3))
summ.percent.by(AgeBin3,
train1$Survived,
main="Proportion Survived by AgeBin",
xname='Age of Passenger (after imputation)', yname="Survived")
# After imputation
AgeBin3<-cut(train1$Age, seq(0, 90, by=2))
summ.percent.by(AgeBin3,
train1$Survived,
main="Proportion Survived by AgeBin",
xname='Age of Passenger (after imputation)', yname="Survived")
summary(train[,"SibSp"])
summary(test[,"SibSp"])
summary(train[,"SibSp"])
summary(test[,"SibSp"])
#   Dual Histograms
hist.by(train$SibSp, train$Survived,
main="Histograms of Fare by Survival", ymax=400, breaks=10,
xname='Fare', yname="Survived")
hist.by(train$SibSp, train$Survived,
main="Histograms of Fare by Survival", ymax=400, breaks=20,
xname='Fare', yname="Survived")
summary(train[,"SibSp"])
summary(test[,"SibSp"])
#   Dual Histograms
hist.by(train$SibSp, train$Survived,
main="Histograms of Fare by Survival", ymax=400, breaks=8,
xname='Fare', yname="Survived")
summary(train[,"SibSp"])
summary(test[,"SibSp"])
#   Dual Histograms
hist.by(train$SibSp, train$Survived,
main="Histograms of Fare by Survival", ymax=400, breaks=10,
xname='Fare', yname="Survived")
summary(train[,"SibSp"])
summary(test[,"SibSp"])
#   Dual Histograms
hist.by(train$SibSp, train$Survived,
main="Histograms of Siblings/Spouses by Survival", ymax=400, breaks=10,
xname='SibSp', yname="Survived")
summary(train[,"Parch"])
summary(test[,"Parch"])
#   Dual Histograms
hist.by(train$SibSp, train$Survived,
main="Histograms of Parents/Children by Survival", ymax=400, breaks=10,
xname='Parch', yname="Survived")
############################
## FARE
############################
summary(train[,"Parch"])
summary(test[,"Parch"])
#   Dual Histograms
hist.by(train$Parch, train$Survived,
main="Histograms of Parents/Children by Survival", ymax=400, breaks=10,
xname='Parch', yname="Survived")
############################
## PARCH
############################
summary(train[,"Parch"])
summary(test[,"Parch"])
#   Dual Histograms
hist.by(train$Parch, train$Survived,
main="Histograms of Parents/Children by Survival", ymax=450, breaks=10,
xname='Parch', yname="Survived")
############################
## Family
############################
summary(train[,"Family"])
summary(test[,"Family"])
#   Dual Histograms
hist.by(train$Family, train$Survived,
main="Histograms of Family Size by Survival", ymax=450, breaks=10,
xname='Family', yname="Survived")
############################
## FAMILY
############################
summary(train1[,"Family"])
summary(test[,"Family"])
#   Dual Histograms
hist.by(train1$Family, train$Survived,
main="Histograms of Family Size by Survival", ymax=450, breaks=10,
xname='Family', yname="Survived")
############################
## FAMILY
############################
summary(train1[,"Family"])
summary(test1[,"Family"])
#   Dual Histograms
hist.by(train1$Family, train$Survived,
main="Histograms of Family Size by Survival", ymax=450, breaks=11,
xname='Family', yname="Survived")
############################
## FAMILY
############################
summary(train1[,"Family"])
summary(test1[,"Family"])
#   Dual Histograms
hist.by(train1$Family, train$Survived,
main="Histograms of Family Size by Survival", ymax=500, breaks=11,
xname='Family', yname="Survived")
summ.percent.by(train$SibSp, train1$Survived, main="Proportion Survived by Fare",
xname='Ticket Price', yname="Survived")
summ.percent.by(train$Parch, train1$Survived, main="Proportion Survived by Fare",
xname='Ticket Price', yname="Survived")
summ.percent.by(train1$Family, train1$Survived, main="Proportion Survived by Fare",
xname='Ticket Price', yname="Survived")
summ.percent.by(train$Parch, train1$Survived, main="Proportion Survived by Parch",
xname='Parch', yname="Survived")
summ.percent.by(train$SibSp, train1$Survived, main="Proportion Survived by SibSp",
xname='SibSp', yname="Survived")
summ.percent.by(train1$Family, train1$Survived, main="Proportion Survived by Family",
xname='Family', yname="Survived")
summ.percent.by(train$SibSp, train1$Survived, main="Proportion Survived by SibSp",
xname='SibSp', yname="Survived")
summ.percent.by(train$Parch, train1$Survived, main="Proportion Survived by Parch",
xname='Parch', yname="Survived")
