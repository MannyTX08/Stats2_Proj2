unique(train[,"SibSp"])
unique(train[,"Parch"])
summary(train[,"Ticket"])[1:30]
grep("[A-z]", train$Ticket)[1:30]
grepl("[A-z]", train$Ticket)[1:30]
length(grepl("[A-z]", train$Ticket))
train$TicketText = as.factor(grepl("[A-z]", train$Ticket))
levels(train$TicketText)
train$TicketText = as.factor(grepl("[A-z]", train$Ticket))
levels(train$TicketText)
levels(train$TicketText)<-c('No Text', 'Text')
levels(train$TicketText)
h2<-rnorm(1000,4)
h1<-rnorm(1000,6)
# Histogram Grey Color
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
# Histogram Colored (blue and red)
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
hist(h2, col=rgb(0,0,1,0.5), add=T)
h2<-rnorm(1000,4)
h1<-rnorm(1000,6)
# Histogram Grey Color
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main='Overlapping Histogram')
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
# Histogram Colored (blue and red)
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main='Overlapping Histogram', xlab=”Variable”)
hist(h2, col=rgb(0,0,1,0.5), add=T)
# Histogram Grey Color
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main='Overlapping Histogram')
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
# Histogram Colored (blue and red)
hist(h1, col=rgb(1,0,0,0.5), xlim=c(0,10), ylim=c(0,200), main='Overlapping Histogram', xlab='Variable')
hist(h2, col=rgb(0,0,1,0.5), add=T)
par(mfrow=c(1,1))
h2<-rnorm(1000,4)
h1<-rnorm(1000,6)
# Histogram Grey Color
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main='Overlapping Histogram')
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
# Histogram Colored (blue and red)
hist(h1, col=rgb(1,0,0,0.5), xlim=c(0,10), ylim=c(0,200), main='Overlapping Histogram', xlab='Variable')
hist(h2, col=rgb(0,0,1,0.5), add=T)
hist(h1, col=rgb(1,0,0,0.5), xlim=c(0,10), ylim=c(0,200), main='Overlapping Histogram', xlab='Variable')
hist(h2, col=rgb(0,0,1,0.5), add=T, ylim=c(200, 0))
summary(train[,"Name"])
summary(test[,"Name"])
Title_test = substr(str_extract(train$Name, ", (.*?)[:punct:]"), 3, 15)
Title_train = substr(str_extract(test$Name, ", (.*?)[:punct:]"), 3, 15)
summary(Title_test)
summary(Title_train)
library('stringr')
summary(Title_test)
summary(Title_train)
Title_test = substr(str_extract(train$Name, ", (.*?)[:punct:]"), 3, 15)
Title_train = substr(str_extract(test$Name, ", (.*?)[:punct:]"), 3, 15)
summary(Title_test)
summary(Title_train)
summary(train[,"PassengerId"])
summary(test[,"PassengerId"])
summary(train[,"Survived"])
summary(test[,"Survived"])
summary(train[,"Pclass"])
summary(test[,"Pclass"])
summary(train[,"Name"])
summary(test[,"Name"])
summary(train1[,"Title"])
summary(test1[,"Title"])
length(Unique(train[,"Name"]))
length(Unique(test[,"Name"]))
summary(train[,"Name"])
summary(test[,"Name"])
length(unique(train[,"Name"]))
length(unique(test[,"Name"]))
summary(test[,"Survived"])
summary(test[,"PassengerId"])
summary(train[,"Sex"])
summary(test[,"Sex"])
summary(train1[,"Age"])
summary(test1[,"Age"])
summary(train[,"Age"])
summary(test[,"Age"])
summary(train[,"Fare"])
summary(test[,"Fare"])
table(train$Pclass, train$Survived)
t<-table(train$Pclass, train$Survived)
t
t/apply(t, 1, sum)
barplot(t(t2)))
barplot(t(t2))
t<-table(train$Pclass, train$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
summary(train1[,"AgeBin"])
summary(test1[,"AgeBin"])
summary(train1[,"AgeBin"])
summary(test1[,"AgeBin"])
t<-table(train1$AgeBin, train1$AgeBin)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
t<-table(train1$AgeBin, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin2<-addNA(cut(train$Age, seq(0, 90, by=5)))
#full$AgeBin[10:35]
l<-levels(AgeBin2)[-(length(levels(AgeBin2)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin2)<-c(l, 'unknown')
t<-table(AgeBin2, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin3<-addNA(cut(train$Age, seq(0, 90, by=15)))
#full$AgeBin[10:35]
l<-levels(AgeBin2)[-(length(levels(AgeBin2)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin3)<-c(l, 'unknown')
t<-table(AgeBin2, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin3<-addNA(cut(train$Age, seq(0, 90, by=15)))
#full$AgeBin[10:35]
l<-levels(AgeBin3)[-(length(levels(AgeBin3)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin3)<-c(l, 'unknown')
t<-table(AgeBin3, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin2<-addNA(cut(train$Age, seq(0, 90, by=6)))
#full$AgeBin[10:35]
l<-levels(AgeBin2)[-(length(levels(AgeBin2)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin2)<-c(l, 'unknown')
t<-table(AgeBin2, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin2<-addNA(cut(train$Age, seq(0, 90, by=9)))
#full$AgeBin[10:35]
l<-levels(AgeBin2)[-(length(levels(AgeBin2)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin2)<-c(l, 'unknown')
t<-table(AgeBin2, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin2<-addNA(cut(train$Age, seq(0, 90, by=6)))
#full$AgeBin[10:35]
l<-levels(AgeBin2)[-(length(levels(AgeBin2)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin2)<-c(l, 'unknown')
t<-table(AgeBin2, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin2<-addNA(cut(train$Age, seq(0, 90, by=6)))
levels(AgeBin2)
#full$AgeBin[10:35]
#l<-levels(AgeBin2)[-(length(levels(AgeBin2)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin2)<-c("6 or less", rep("7 - 60", 9), rep("60+", 5), "unknown")
levels(AgeBin2)<
levels(AgeBin2)
t<-table(AgeBin2, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
AgeBin2<-addNA(cut(train$Age, seq(0, 90, by=6)))
#full$AgeBin[10:35]
#l<-levels(AgeBin2)[-(length(levels(AgeBin2)))]
#l
#    replace <NA> with 'unknown'
levels(AgeBin2)<-c("6 or less", rep("7 - 65", 10), rep("66+", 4), "unknown")
t<-table(AgeBin2, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
summary(train[,"Cabin"])[1:30]
summary(test[,"Cabin"])[1:30]
summary(train[,"Embarked"])
summary(test[,"Embarked"])
summary(train1[,"Title"])
summary(test1[,"Title"])
summary(train1[,"Title"])
summary(test1[,"Title"])
t<-table(train1$Title, train1$Survived)
t
t2<-t/apply(t, 1, sum)
t2
barplot(t(t2))
# Load necessary packages and ensure they are active
load.lib = c("randomForest","ggplot2","ggthemes","mice","scales","dplyr","Amelia","ROCR", "boot", "bestglm")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
suppressMessages(sapply(load.lib,require,character=TRUE))
###### IMPORT DATA / CLEAN DATA / IMPUTE VARIABLES / CREATE NEW VARIABLES
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
#OUTPUT: train      RAW DATA LOADED IN WORKSPACE
#OUTPUT: test       RAW DATA LOADED IN WORKSPACE
#OUTPUT: train1     CLEAN DATA STORED IN WORKSPACE
#OUTPUT: test1      CLEAN DATA STORED IN WORKSPACE
#OUTPUT: train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#OUTPUT: test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
setwd("~/Stats2_Proj2/")
#INPUT: train.csv   RAW DATA FROM KAGGLE
#INPUT: test.csv    RAW DATA FROM KAGGLE
source('BaseVars.R', echo=TRUE)
#OUTPUT: train      RAW DATA LOADED IN WORKSPACE
#OUTPUT: test       RAW DATA LOADED IN WORKSPACE
#OUTPUT: train1     CLEAN DATA STORED IN WORKSPACE
#OUTPUT: test1      CLEAN DATA STORED IN WORKSPACE
#OUTPUT: train2     CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
#OUTPUT: test2      CLEAN DATA STORED IN WORKSPACE, ALL NUMERIC
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train1, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
c=train1$Survived
p=predict(TitanicLog2, newdata=test1, type='response')
cv=cv.glm(data=train1, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
summary(p)
str(p)
p[1:20]
str(test1)
str(test2)
str(test)
kaggle<-cbind.data.frame("PassengerID"=test$PassengerID, "Survived"=p)
kaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=p)
summary(kaggle)
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=p)
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE, append=FALSE)
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE, append=FALSE)
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
summary(TitanicLog2)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
# subset the data using the sample integer vector created above
train3 <- train1[ !(names(train1) %in% c("Age","Sibch", "Parch", "Embarked"))]
test3  <- train1[ !(names(test1) %in% c("Age","Sibch", "Parch", "Embarked"))]
str(train3)
str(test3)
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
# subset the data using the sample integer vector created above
train3 <- train1[ !(names(train1) %in% c("Age","SibSp", "Parch", "Embarked"))]
test3  <- train1[ !(names(test1) %in% c("Age","SibSp", "Parch", "Embarked"))]
str(train3)
str(test3)
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
# subset the data using the sample integer vector created above
train3 <- train1[ !(names(train1) %in% c("AgeBin","SibSp", "Parch", "Embarked"))]
test3  <- train1[ !(names(test1) %in% c("AgeBin","SibSp", "Parch", "Embarked"))]
str(train3)
str(test3)
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
# subset the data using the sample integer vector created above
train3 <- train1[ !(names(train1) %in% c("AgeBin","SibSp", "Parch", "Embarked"))]
test3  <- train1[ !(names(test1) %in% c("AgeBin","SibSp", "Parch", "Embarked"))]
str(train3)
str(test3)
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
p2<-p
# subset the data using the sample integer vector created above
train3 <- train1[ !(names(train1) %in% c("Age","Family", "Embarked"))]
test3  <- train1[ !(names(test1) %in% c("Age","Family", "Embarked"))]
str(train3)
str(test3)
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
# subset the data using the sample integer vector created above
train3 <- train1[ !(names(train1) %in% c("Age","SibSp", "Parch", "Embarked"))]
test3  <- test1[ !(names(test1) %in% c("Age","SibSp", "Parch", "Embarked"))]
str(train3)
str(test3)
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
# subset the data using the sample integer vector created above
train3 <- train1[ !(names(train1) %in% c("Age","Family", "Embarked"))]
test3  <- test1[ !(names(test1) %in% c("Age","Family", "Embarked"))]
str(train3)
str(test3)
# Logistic regression model
TitanicLog2 = glm(Survived ~ ., data = train3, family = binomial(link='logit'))
summary(TitanicLog2)
c=train1$Survived
p=predict(TitanicLog2, newdata=test3, type='response')
ACkaggle<-cbind.data.frame("PassengerID"=test$PassengerId, "Survived"=round(p))
write.csv(ACkaggle, file="~/ACKaggle.csv", row.names = FALSE)
cv=cv.glm(data=train3, glmfit=TitanicLog2, K=5)
#ls(cv)
cv["delta"]
Xy<-cbind.data.frame(test1[!(names(test1) %in% c("Survived")], test1[, "Survived"])
Xy<-cbind.data.frame( train1[ !(names(train1) %in% c("Survived"))], test1[, "Survived"]  )
Xy<-cbind.data.frame( train1[ !(names(train1) %in% c("Survived"))], train1[, "Survived"]  )
testglm<-bestglm(Xy, family = binomial(link='logit'), IC=CV)
testglm<-bestglm(Xy, family = binomial(link='logit'), IC="CV")
str(train1)
lapply(levels(train1$Title), function(x) paste("train", x, sep="$"))
lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
table(	train1$Male, train1$Sex )
str(train1)
train1$Male = train1$Sex == "male"
train1$Female = train1$Sex == "female"
train1$Class1 = train1$Pclass == "1"
train1$Class2 = train1$Pclass == "2"
train1$Class3 = train1$Pclass == "3"
train1$PortC = train1$Embarked == "C"
train1$PortQ = train1$Embarked == "Q"
train1$PortS = train1$Embarked == "S"
train1$Child = train1$AgeBin == "6 or Less"
train1$Senior= train1$AgeBin == "(7 - 63]"
train1$Adult = train1$AgeBin == "Over 63"
#lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
train$Master = train1$Title == "Master"
train1$Miss  = train1$Title == "Miss"
train1$Mr    = train1$Title == "Mr"
train1$Mrs   = train1$Title == "Mrs"
train1$uncommon= train1$Title == "uncommon"
table(	train1$Male, train1$Sex )
str(train1)
train1$Male = (train1$Sex == "male")*1
train1$Female = train1$Sex == "female" * 1
train1$Class1 = train1$Pclass == "1"
train1$Class2 = train1$Pclass == "2"
train1$Class3 = train1$Pclass == "3"
train1$PortC = train1$Embarked == "C"
train1$PortQ = train1$Embarked == "Q"
train1$PortS = train1$Embarked == "S"
train1$Child = train1$AgeBin == "6 or Less"
train1$Senior= train1$AgeBin == "(7 - 63]"
train1$Adult = train1$AgeBin == "Over 63"
#lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
train$Master = train1$Title == "Master"
train1$Miss  = train1$Title == "Miss"
train1$Mr    = train1$Title == "Mr"
train1$Mrs   = train1$Title == "Mrs"
train1$uncommon= train1$Title == "uncommon"
table(	train1$Male, train1$Sex )
table(	train1$Female, train1$Sex )
str(train1)
train1$Male = (train1$Sex == "male")*1
train1$Female = (train1$Sex == "female") * 1
train1$Class1 = (train1$Pclass == "1")*1
train1$Class2 = (train1$Pclass == "2")*1
train1$Class3 = (train1$Pclass == "3")*1
train1$PortC = (train1$Embarked == "C")*1
train1$PortQ = (train1$Embarked == "Q")*1
train1$PortS = (train1$Embarked == "S")*1
train1$Child = (train1$AgeBin == "6 or Less")*1
train1$Senior= (train1$AgeBin == "(7 - 63]")*1
train1$Adult = (train1$AgeBin == "Over 63")*1
#lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
train$Master = (train1$Title == "Master")*1
train1$Miss  = (train1$Title == "Miss")*1
train1$Mr    = (train1$Title == "Mr")*1
train1$Mrs   = (train1$Title == "Mrs")*1
train1$uncommon= (train1$Title == "uncommon")*1
table(	train1$Male, train1$Sex )
table(	train1$Female, train1$Sex )
table(	train1$Class1, train1$Pclass)
table(	train1$Class2, train1$Pclass )
table(	train1$Class3, train1$Pclass 	)
table(	train1$PortC, train1$Embarked 	)
table(	train1$PortQ, train1$Embarked 	)
table(	train1$PortS, train1$Embarked 	)
table(	train1$Child, train1$AgeBin	)
table(	train1$Senior, train1$AgeBin 	)
table(	train1$Adult, train1$AgeBin 	)
table(	train$Master, train1$Title )
table(	train1$Miss, train1$Title 	)
table(	train1$Mr, train1$Title )
table(	train1$Mrs, train1$Title )
table(	train1$uncommon, train1$Title	)
str(train1)
train1$Male = (train1$Sex == "male")*1
train1$Female = (train1$Sex == "female") * 1
train1$Class1 = (train1$Pclass == "1")*1
train1$Class2 = (train1$Pclass == "2")*1
train1$Class3 = (train1$Pclass == "3")*1
train1$PortC = (train1$Embarked == "C")*1
train1$PortQ = (train1$Embarked == "Q")*1
train1$PortS = (train1$Embarked == "S")*1
train1$Child = (train1$AgeBin == "6 or less")*1
train1$Adult= (train1$AgeBin == "(7 - 63]")*1
train1$Senior = (train1$AgeBin == "Over 63")*1
#lapply(levels(train1$Title), function(x) paste("train1", x, sep="$"))
train$Master = (train1$Title == "Master")*1
train1$Miss  = (train1$Title == "Miss")*1
train1$Mr    = (train1$Title == "Mr")*1
train1$Mrs   = (train1$Title == "Mrs")*1
train1$uncommon= (train1$Title == "uncommon")*1
table(	train1$Male, train1$Sex )
table(	train1$Female, train1$Sex )
table(	train1$Class1, train1$Pclass)
table(	train1$Class2, train1$Pclass )
table(	train1$Class3, train1$Pclass 	)
table(	train1$PortC, train1$Embarked 	)
table(	train1$PortQ, train1$Embarked 	)
table(	train1$PortS, train1$Embarked 	)
table(	train1$Child, train1$AgeBin	)
table(	train1$Senior, train1$AgeBin 	)
table(	train1$Adult, train1$AgeBin 	)
table(	train$Master, train1$Title )
table(	train1$Miss, train1$Title 	)
table(	train1$Mr, train1$Title )
table(	train1$Mrs, train1$Title )
table(	train1$uncommon, train1$Title	)
Xy<-cbind.data.frame( train1[ !(names(train1) %in% c("Pclass", "Sex", "Embarked", "Title", "AgeBin", "Survived"))], train1[, "Survived"]  )
testglm<-bestglm(Xy, family = binomial(link='logit'), IC="CV")
Xy<-cbind.data.frame( train1[, !(names(train1) %in% c("Pclass", "Sex", "Embarked", "Title", "AgeBin", "Survived"))], train1[, "Survived"]  )
str(Xy)
Xy<-cbind.data.frame( train1[, !(names(train1) %in% c("Pclass", "Sex", "Embarked", "Title", "AgeBin", "Survived"))], "Survived"=train1[, "Survived"]  )
str(Xy)
testglm<-bestglm(Xy, family = binomial(link='logit'), IC="CV")
# split the training data into a secondary test (not Kaggle)
set.seed(100) # set seed so that same sample can be reproduced in future
testglm<-bestglm(Xy, family = binomial(link='logit'), IC="CV")
testglm<-bestglm(Xy, family = binomial(link='logit'), IC="CV", t=3)
testglm<-bestglm(Xy, family = binomial(link='logit'), IC="CV")
install.packages("svMisc")
